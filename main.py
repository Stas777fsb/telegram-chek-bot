import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import aiohttp

API_TOKEN = "7797606083:AAESciBzaFUiMmWiuqoOM61Ef7I7vEXNkQU"
ABSTRACT_API_KEY = "76599f16ac4f4a359808485a87a8f3bd"
NUMVERIFY_API_KEY = "79bddad60baa9d9d54feff822627b12a"

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# –°—Ç–µ–π—Ç-–º–∞—à–∏–Ω–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
class Form(StatesGroup):
    waiting_for_ip = State()
    waiting_for_email = State()
    waiting_for_phone = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = [
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ IP", callback_data="check_ip")],
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ email", callback_data="check_email")],
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data="check_phone")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@dp.message(F.text, F.text.lower().in_(["/start", "—Å—Ç–∞—Ä—Ç", "–Ω–∞—á–∞—Ç—å"]))
async def start_handler(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏:", reply_markup=main_menu())
@dp.callback_query(F.data == "check_ip")
async def process_ip_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    await state.set_state(Form.waiting_for_ip)
    await callback.answer()

@dp.message(Form.waiting_for_ip)
async def handle_ip_input(message: Message, state: FSMContext):
    ip = message.text.strip()
    url = f"https://ipgeolocation.abstractapi.com/v1/?api_key={ABSTRACT_API_KEY}&ip_address={ip}"
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            data = await resp.json()
    
    risk_score = int(data.get("security", {}).get("threat_score", 0))
    color = "üü¢" if risk_score < 30 else "üü°" if risk_score < 70 else "üî¥"
    info = f"""
<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ IP:</b> {ip}
<b>–°—Ç—Ä–∞–Ω–∞:</b> {data.get("country")}
<b>–ì–æ—Ä–æ–¥:</b> {data.get("city")}
<b>ZIP:</b> {data.get("postal_code")}
<b>–ü—Ä–æ–≤–∞–π–¥–µ—Ä:</b> {data.get("connection", {}).get("isp_name")}
<b>VPN/Proxy:</b> {'–î–∞' if data.get("security", {}).get("is_vpn") or data.get("security", {}).get("is_proxy") else '–ù–µ—Ç'}
<b>–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞:</b> {risk_score}/100 {color}
"""
    await message.answer(info.strip(), parse_mode=ParseMode.HTML)
    await state.clear()
@dp.callback_query(F.data == "check_email")
async def process_email_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    await state.set_state(Form.waiting_for_email)
    await callback.answer()
 @dp.message(Form.waiting_for_email)
async def handle_email_input(message: Message, state: FSMContext):
    email = message.text.strip()
    url = f"https://emailvalidation.abstractapi.com/v1/?api_key={ABSTRACT_API_KEY}&email={email}"
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            data = await resp.json()

    risk_score = 0
    if not data.get("is_valid_format", {}).get("value"):
        risk_score += 40
    if data.get("is_disposable", {}).get("value"):
        risk_score += 30
    if not data.get("is_smtp_valid", {}).get("value"):
        risk_score += 30

    color = "üü¢" if risk_score < 30 else "üü°" if risk_score < 70 else "üî¥"
    
    info = f"""
<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ Email:</b> {email}
<b>–§–æ—Ä–º–∞—Ç:</b> {'–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π' if data.get("is_valid_format", {}).get("value") else '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π'}
<b>–°—É—â–µ—Å—Ç–≤—É–µ—Ç:</b> {'–î–∞' if data.get("is_smtp_valid", {}).get("value") else '–ù–µ—Ç'}
<b>–ü—Ä–æ–≤–∞–π–¥–µ—Ä:</b> {data.get("domain")}
<b>–í—Ä–µ–º–µ–Ω–Ω—ã–π:</b> {'–î–∞' if data.get("is_disposable", {}).get("value") else '–ù–µ—Ç'}
<b>–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞:</b> {risk_score}/100 {color}
"""
    await message.answer(info.strip(), parse_mode=ParseMode.HTML)
    await state.clear()
@dp.callback_query(F.data == "check_phone")
async def process_phone_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: +14158586273):")
    await state.set_state(Form.waiting_for_phone)
    await callback.answer()
 @dp.message(Form.waiting_for_phone)
async def handle_phone_input(message: Message, state: FSMContext):
    phone = message.text.strip().replace(" ", "")
    url = f"https://phonevalidation.abstractapi.com/v1/?api_key={ABSTRACT_API_KEY}&phone={phone}"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            data = await resp.json()

    risk_score = 0
    if not data.get("valid"):
        risk_score += 50
    if not data.get("line_type") or data.get("line_type") == "unknown":
        risk_score += 25
    if not data.get("carrier"):
        risk_score += 25

    color = "üü¢" if risk_score < 30 else "üü°" if risk_score < 70 else "üî¥"

    info = f"""
<b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {phone}
<b>–°—Ç—Ä–∞–Ω–∞:</b> {data.get("country", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")}
<b>–û–ø–µ—Ä–∞—Ç–æ—Ä:</b> {data.get("carrier", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")}
<b>–¢–∏–ø –ª–∏–Ω–∏–∏:</b> {data.get("line_type", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")}
<b>–§–æ—Ä–º–∞—Ç:</b> {'–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π' if data.get("valid") else '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π'}
<b>–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞:</b> {risk_score}/100 {color}
"""
    await message.answer(info.strip(), parse_mode=ParseMode.HTML)
    await state.clear()   
