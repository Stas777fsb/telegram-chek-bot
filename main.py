import logging
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.utils.markdown import hbold
from aiogram import F

API_TOKEN = "7797606083:AAESciBzaFUiMmWiuqoOM61Ef7I7vEXNkQU"
IPQUALITY_API_KEY = "QUn48qWULMrgLKONUVMDJ3nG8A7"
BTC_ADDRESS = "19LQnQug2NoWm6bGTx9PWtdKMthHUtcEjF"
LTC_ADDRESS = "ltc1qygzgqj47ygz2qsazquj20u20lffss6dkdn0qk2"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(
        f"{hbold('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ IP")],
                [types.KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ email")],
                [types.KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")],
                [types.KeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")]
            ],
            resize_keyboard=True
        )
    )

@dp.message(F.text.lower() == "–ø—Ä–æ–≤–µ—Ä–∫–∞ ip")
async def check_ip(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å:")
    dp.message.register(handle_ip)

async def handle_ip(message: Message):
    ip = message.text.strip()
    response = requests.get(f"https://ipqualityscore.com/api/json/ip/{IPQUALITY_API_KEY}/{ip}").json()

    risk_score = int(response.get("fraud_score", 0))
    color = "üü¢" if risk_score < 30 else "üü°" if risk_score < 70 else "üî¥"
    blacklist_info = "–î–∞" if response.get("proxy") or response.get("tor") or response.get("vpn") else "–ù–µ—Ç"

    await message.answer(
        f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è IP:</b> {ip}\n"
        f"–°—Ç—Ä–∞–Ω–∞: {response.get('country_code')}\n"
        f"–ì–æ—Ä–æ–¥: {response.get('city')}\n"
        f"ZIP: {response.get('zipcode')}\n"
        f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {response.get('ISP')}\n"
        f"–†–∏—Å–∫: {color} {risk_score}/100\n"
        f"–í —á–µ—Ä–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö: {blacklist_info}"
    )

@dp.message(F.text.lower() == "–ø—Ä–æ–≤–µ—Ä–∫–∞ email")
async def check_email_prompt(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email:")
    dp.message.register(handle_email)

async def handle_email(message: Message):
    email = message.text.strip()
    response = requests.get(f"https://ipqualityscore.com/api/json/email/{IPQUALITY_API_KEY}/{email}").json()
    risk_score = int(response.get("fraud_score", 0))
    deliverable = "–î–∞" if response.get("deliverability") == "high" else "–ù–µ—Ç"
    color = "üü¢" if risk_score < 30 else "üü°" if risk_score < 70 else "üî¥"

    await message.answer(
        f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è email:</b> {email}\n"
        f"–†–∏—Å–∫: {color} {risk_score}/100\n"
        f"–î–æ—Å—Ç–∞–≤–ª—è–µ–º–æ—Å—Ç—å: {deliverable}\n"
        f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {response.get('domain')}"
    )

@dp.message(F.text.lower() == "–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
async def check_phone_prompt(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567):")
    dp.message.register(handle_phone)

async def handle_phone(message: Message):
    phone = message.text.strip()
    response = requests.get(f"https://ipqualityscore.com/api/json/phone/{IPQUALITY_API_KEY}/{phone}").json()
    risk_score = int(response.get("fraud_score", 0))
    valid = "–î–∞" if response.get("valid") else "–ù–µ—Ç"
    carrier = response.get("carrier") or "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
    region = response.get("region") or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    color = "üü¢" if risk_score < 30 else "üü°" if risk_score < 70 else "üî¥"

    await message.answer(
        f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {phone}\n"
        f"–†–∏—Å–∫: {color} {risk_score}/100\n"
        f"–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {valid}\n"
        f"–û–ø–µ—Ä–∞—Ç–æ—Ä: {carrier}\n"
        f"–†–µ–≥–∏–æ–Ω: {region}"
    )

@dp.message(F.text.lower() == "–ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def top_up_balance(message: Message):
    await message.answer(
        f"<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b>\n\n"
        f"BTC: <code>{BTC_ADDRESS}</code>\n"
        f"LTC: <code>{LTC_ADDRESS}</code>\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—É–º–º—ã –∏ ID: <code>{message.from_user.id}</code>"
    )

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
