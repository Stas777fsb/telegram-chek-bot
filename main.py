import asyncio import logging from aiogram import Bot, Dispatcher, types, F from aiogram.types import ReplyKeyboardMarkup, KeyboardButton from aiogram.enums import ParseMode from aiohttp import ClientSession from collections import defaultdict import re

API_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN" IPQUALITY_API_KEY = "YOUR_IPQUALITYSCORE_API_KEY" ABSTRACT_API_KEY = "YOUR_ABSTRACTAPI_KEY" NUMVERIFY_API_KEY = "YOUR_NUMVERIFY_API_KEY"

FREE_LIMIT = 10 PRICE_PER_CHECK = 0.10

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML) dp = Dispatcher()

user_data = defaultdict(lambda: {"free_checks": 0, "balance": 0.0})

menu_keyboard = ReplyKeyboardMarkup( keyboard=[ [KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ IP")], [KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")], [KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ email")], [KeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")] ], resize_keyboard=True )

@dp.message(F.text == "/start") async def start_handler(message: types.Message): user_id = message.from_user.id await message.answer( f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n" f"–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç IP, —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∏ email –Ω–∞ —Ä–∏—Å–∫.\n" f"–í–∞—à ID: <code>{user_id}</code>\n" f"–ë–∞–ª–∞–Ω—Å: <b>${user_data[user_id]['balance']:.2f}</b>\n" f"–î–æ—Å—Ç—É–ø–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö IP-–ø—Ä–æ–≤–µ—Ä–æ–∫: <b>{FREE_LIMIT - user_data[user_id]['free_checks']}</b>", reply_markup=menu_keyboard )

@dp.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∫–∞ IP") async def ask_ip(message: types.Message): await message.answer("–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")

@dp.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞") async def ask_phone(message: types.Message): await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +1234567890:")

@dp.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∫–∞ email") async def ask_email(message: types.Message): await message.answer("–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")

@dp.message(F.text == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å") async def top_up_balance(message: types.Message): keyboard = ReplyKeyboardMarkup( keyboard=[ [KeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å BTC")], [KeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å LTC")], [KeyboardButton(text="–ù–∞–∑–∞–¥")] ], resize_keyboard=True ) await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=keyboard)

@dp.message(F.text == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å BTC") async def btc_topup(message: types.Message): await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ BTC –Ω–∞ –∞–¥—Ä–µ—Å:\n<code>19LQnQug2NoWm6bGTx9PWtdKMthHUtcEjF</code>")

@dp.message(F.text == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å LTC") async def ltc_topup(message: types.Message): await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ LTC –Ω–∞ –∞–¥—Ä–µ—Å:\n<code>ltc1qygzgqj47ygz2qsazquj20u20lffss6dkdn0qk2</code>")

@dp.message(F.text == "–ù–∞–∑–∞–¥") async def back_to_menu(message: types.Message): await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=menu_keyboard)

@dp.message() async def universal_handler(message: types.Message): text = message.text.strip() user_id = message.from_user.id

if re.match(r"^\d{1,3}(\.\d{1,3}){3}$", text):
    # IP check
    if user_data[user_id]["free_checks"] < FREE_LIMIT:
        user_data[user_id]["free_checks"] += 1
    elif user_data[user_id]["balance"] >= PRICE_PER_CHECK:
        user_data[user_id]["balance"] -= PRICE_PER_CHECK
    else:
        await message.answer("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
        return

    async with ClientSession() as session:
        url = f"https://ipqualityscore.com/api/json/ip/{IPQUALITY_API_KEY}/{text}"
        async with session.get(url) as resp:
            data = await resp.json()

    score = round((1 - data["fraud_score"] / 100) * 100, 2)
    color = "üü¢" if score >= 70 else "üü°" if score >= 40 else "üî¥"
    blacklist_info = f"{data['bot_status'] + data['proxy'] + data['vpn'] + data['tor']}/50"

    result = (
        f"<b>IP Score: {score} | IP {'–•–æ—Ä–æ—à–∏–π' if score >= 70 else '–°—Ä–µ–¥–Ω–∏–π' if score >= 40 else '–ü–ª–æ—Ö–æ–π'} {color}</b>\n\n"
        f"<b>–ü–æ–¥—Ä–æ–±–Ω–µ–µ:</b>\n"
        f"Proxy: {'–û–±–Ω–∞—Ä—É–∂–µ–Ω' if data['proxy'] else '–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω'}\n"
        f"VPN: {'–û–±–Ω–∞—Ä—É–∂–µ–Ω' if data['vpn'] else '–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω'}\n"
        f"–ê–°–ù: {data.get('asn', '‚Äî')}\n"
        f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {data.get('ISP', '‚Äî')}\n"
        f"–°—Ç—Ä–∞–Ω–∞: {data.get('country_name', '‚Äî')}\n"
        f"–†–µ–≥–∏–æ–Ω: {data.get('region', '‚Äî')}\n"
        f"–ì–æ—Ä–æ–¥: {data.get('city', '‚Äî')}\n"
        f"–ò–Ω–¥–µ–∫—Å: {data.get('zip_code', '‚Äî')}\n"
        f"\n–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: {blacklist_info}"
    )
    await message.answer(result)

elif re.match(r"^\+?\d{7,15}$", text):
    # Phone check
    async with ClientSession() as session:
        url = f"http://apilayer.net/api/validate?access_key={NUMVERIFY_API_KEY}&number={text}"
        async with session.get(url) as resp:
            data = await resp.json()

    result = (
        f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>\n"
        f"–ù–æ–º–µ—Ä: {data.get('international_format', text)}\n"
        f"–°—Ç—Ä–∞–Ω–∞: {data.get('country_name', '‚Äî')}\n"
        f"–û–ø–µ—Ä–∞—Ç–æ—Ä: {data.get('carrier', '‚Äî')}\n"
        f"–õ–∏–Ω–∏—è: {data.get('line_type', '‚Äî')}\n"
        f"–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {'–î–∞' if data.get('valid') else '–ù–µ—Ç'}"
    )
    await message.answer(result)

elif re.match(r"^[\w\.-]+@[\w\.-]+\.\w+$", text):
    # Email check
    async with ClientSession() as session:
        url = f"https://emailvalidation.abstractapi.com/v1/?api_key={ABSTRACT_API_KEY}&email={text}"
        async with session.get(url) as resp:
            data = await resp.json()

    result = (
        f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ email:</b>\n"
        f"Email: {data.get('email', text)}\n"
        f"–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: {'–î–∞' if data.get('is_valid_format', {}).get('value') else '–ù–µ—Ç'}\n"
        f"MX-–∑–∞–ø–∏—Å—å: {'–î–∞' if data.get('mx_found') else '–ù–µ—Ç'}\n"
        f"SMTP –ø—Ä–æ–≤–µ—Ä–∫–∞: {'–î–∞' if data.get('smtp_check') else '–ù–µ—Ç'}\n"
        f"Catch-All: {'–î–∞' if data.get('catch_all') else '–ù–µ—Ç'}"
    )
    await message.answer(result)

else:
    await message.answer("–ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ IP, email –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

if name == "main": logging.basicConfig(level=logging.INFO) asyncio.run(dp.start_polling(bot))
