import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import aiohttp
import asyncio
import os

API_TOKEN = os.getenv("7797606083:AAESciBzaFUiMmWiuqoOM61Ef7I7vEXNkQU") NUMVERIFY_API_KEY = "79bddad60baa9d9d54feff822627b12a" ABSTRACT_API_KEY = "76599f16ac4f4a359808485a87a8f3bd"

logging.basicConfig(level=logging.INFO) logger = logging.getLogger(name)

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML) dp = Dispatcher(storage=MemoryStorage())

class CheckState(StatesGroup): phone = State()

@dp.message(lambda message: message.text == "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞") async def phone_check_command(message: Message, state: FSMContext): await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +71234567890):") await state.set_state(CheckState.phone)

@dp.message(CheckState.phone) async def handle_phone(message: Message, state: FSMContext): phone = message.text.strip()

result_text = f"üîç <b>–ù–æ–º–µ—Ä:</b> {phone}\n"

async with aiohttp.ClientSession() as session:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Numverify
    async with session.get(
        f"http://apilayer.net/api/validate?access_key={NUMVERIFY_API_KEY}&number={phone}&format=1"
    ) as resp:
        data = await resp.json()
        valid = data.get("valid")
        country = data.get("country_name")
        operator = data.get("carrier")

    result_text += f"<b>–í–∞–ª–∏–¥–µ–Ω:</b> {'–î–∞' if valid else '–ù–µ—Ç'}\n"
    result_text += f"<b>–°—Ç—Ä–∞–Ω–∞:</b> {country if country else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'}\n"
    result_text += f"<b>–û–ø–µ—Ä–∞—Ç–æ—Ä:</b> {operator if operator else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n"

    # –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Abstract
    async with session.get(
        f"https://phonevalidation.abstractapi.com/v1/?api_key={ABSTRACT_API_KEY}&phone={phone}"
    ) as abstract_resp:
        abstract_data = await abstract_resp.json()
        risk = abstract_data.get("risk_score", 0)

    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ: –Ω–∞–ª–∏—á–∏–µ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö –ø–æ —Å—Ç—Ä–∞–Ω–µ –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É (–∑–∞–≥–ª—É—à–∫–∞)
    social_flag = "–î–∞" if valid and country and operator else "–ù–µ—Ç"
   
    result_text += f"<b>–ù–∞–ª–∏—á–∏–µ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö:</b> {social_flag}\n"
    result_text += f"<b>–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞:</b> {risk}/100"

await message.answer(result_text)
await state.clear()

@dp.message() async def main_menu(message: Message): builder = ReplyKeyboardBuilder() builder.button(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞") builder.adjust(1)

await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=builder.as_markup(resize_keyboard=True))

if name == "main": asyncio.run(dp.start_polling(bot))
