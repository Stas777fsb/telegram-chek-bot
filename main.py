import aiohttp
import random  # –£–¥–∞–ª–∏—à—å –ø–æ–∑–∂–µ, –µ—Å–ª–∏ –±—É–¥–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π API

IPQS_API_KEY = "your_ipqualityscore_api_key"  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π –∫–ª—é—á, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å IPQualityScore

def risk_color(score):
    if score < 30:
        return "üü¢ –•–æ—Ä–æ—à–∏–π"
    elif score < 70:
        return "üü° –°—Ä–µ–¥–Ω–∏–π"
    else:
        return "üî¥ –í—ã—Å–æ–∫–∏–π"

@dp.message(F.text.regexp(r"^\d{1,3}(\.\d{1,3}){3}$"))
async def check_ip(message: Message):
    user_id = message.from_user.id
    today = datetime.utcnow().date()

    if user_id not in user_check_limits or user_check_limits[user_id]["date"] != today:
        user_check_limits[user_id] = {"date": today, "count": 0}

    if user_check_limits[user_id]["count"] >= 10:
        await message.answer("–õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö IP-–ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω. –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–∂–¥–æ–π —Å–ª–µ–¥—É—é—â–µ–π: $0.10")
        return

    user_check_limits[user_id]["count"] += 1
    ip = message.text.strip()

    # –ó–∞–ø—Ä–æ—Å –∫ IPQualityScore (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–π API)
    async with aiohttp.ClientSession() as session:
        try:
            url = f"https://ipqualityscore.com/api/json/ip/{IPQS_API_KEY}/{ip}"
            async with session.get(url) as resp:
                data = await resp.json()
        except Exception as e:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

    score = int(data.get("fraud_score", random.randint(0, 100)))  # –≤—Ä–µ–º–µ–Ω–Ω–æ random –µ—Å–ª–∏ –Ω–µ—Ç API
    provider = data.get("ISP", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    region = data.get("region", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    city = data.get("city", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    zip_code = data.get("zip_code", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    country = data.get("country_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    asn = data.get("ASN", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    blacklist_status = data.get("recent_abuse", False)
    proxy = data.get("proxy", False)
    vpn = data.get("vpn", False)

    color_text = risk_color(score)
    blacklist_text = "0/50" if not blacklist_status else "1+/50"

    text = (
        f"<b>IP:</b> <code>{ip}</code>\n"
        f"<b>IP Score:</b> {score} | {color_text}\n\n"
        f"<b>–ü–æ–¥—Ä–æ–±–Ω–µ–µ:</b>\n"
        f"Proxy: {'–û–±–Ω–∞—Ä—É–∂–µ–Ω' if proxy else '–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω'}\n"
        f"VPN: {'–û–±–Ω–∞—Ä—É–∂–µ–Ω' if vpn else '–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω'}\n"
        f"ASN: {asn}\n"
        f"–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}\n\n"
        f"–°—Ç—Ä–∞–Ω–∞: {country}\n"
        f"–†–µ–≥–∏–æ–Ω: {region}\n"
        f"–ì–æ—Ä–æ–¥: {city}\n"
        f"–ò–Ω–¥–µ–∫—Å: {zip_code}\n\n"
        f"–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: {blacklist_text}"
    )

    await message.answer(text, parse_mode="HTML")
