import asyncio
import logging
import requests
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage

# –ö–õ–Æ–ß–ò –ò –¢–û–ö–ï–ù–´ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
API_TOKEN = "7797606083:AAESciBzaFUiMmWiuqoOM61Ef7I7vEXNkQU"
IPQS_API_KEY = "QUn48qWULMrgLKONUVMDJ3nG8A7AnyCD"
NUMVERIFY_API_KEY = "QUn48qWULMrgLKONUVMDJ3nG8A7AnyCD"

FREE_CHECKS = 10
btc_address = "19LQnQug2NoWm6bGTx9PWtdKMthHUtcEjF"
ltc_address = "ltc1qygzgqj47ygz2qsazquj20u20lffss6dkdn0qk2"

users_data = {}

class MenuStates(StatesGroup):
    waiting_for_ip = State()
    waiting_for_email = State()
    waiting_for_phone = State()

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

main_menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ IP")],
    [KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ email")],
    [KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")],
    [KeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")]
], resize_keyboard=True)

def get_risk_color(risk_score: int) -> str:
    if risk_score < 20:
        return "üü¢"
    elif risk_score < 60:
        return "üü°"
    else:
        return "üî¥"

@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    user_id = str(message.from_user.id)
    if user_id not in users_data:
        users_data[user_id] = {"balance": 0, "free_checks": FREE_CHECKS}
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n"
        f"–¢–≤–æ–π ID: <code>{user_id}</code>\n"
        f"–ë–∞–ª–∞–Ω—Å: ${users_data[user_id]['balance']:.2f}\n"
        f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å–µ–≥–æ–¥–Ω—è: {users_data[user_id]['free_checks']}",
        reply_markup=main_menu
    )

@dp.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∫–∞ IP")
async def ask_ip(message: Message, state: FSMContext):
    await state.set_state(MenuStates.waiting_for_ip)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å IP-–∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")

@dp.message(MenuStates.waiting_for_ip)
async def check_ip(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    ip = message.text.strip()

    response = requests.get(f"https://ipqualityscore.com/api/json/ip/{IPQS_API_KEY}/{ip}").json()
    risk_score = response.get("fraud_score", 0)
    country = response.get("country_code", "N/A")
    city = response.get("city", "N/A")
    zip_code = response.get("zip_code", "N/A")
    blacklisted = response.get("blacklist", False)

    color = get_risk_color(risk_score)
    text = (
        f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è IP {ip}</b>\n"
        f"–†–∏—Å–∫: {risk_score} {color}\n"
        f"–°—Ç—Ä–∞–Ω–∞: {country}, –ì–æ—Ä–æ–¥: {city}\n"
        f"ZIP: {zip_code}\n"
        f"–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: {'–î–∞' if blacklisted else '–ù–µ—Ç'}"
    )

    if users_data[user_id]["free_checks"] > 0:
        users_data[user_id]["free_checks"] -= 1
    elif users_data[user_id]["balance"] >= 0.1:
        users_data[user_id]["balance"] -= 0.1
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å.")
        await state.clear()
        return

    await message.answer(text)
    await state.clear()

@dp.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∫–∞ email")
async def ask_email(message: Message, state: FSMContext):
    await state.set_state(MenuStates.waiting_for_email)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å email –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")

@dp.message(MenuStates.waiting_for_email)
async def check_email(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    email = message.text.strip()

    response = requests.get(f"https://ipqualityscore.com/api/json/email/{IPQS_API_KEY}/{email}").json()
    valid = response.get("valid", False)
    disposable = response.get("disposable", False)
    recent_abuse = response.get("recent_abuse", False)
    risk_score = response.get("fraud_score", 0)

    color = get_risk_color(risk_score)
    text = (
        f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {email}</b>\n"
        f"–†–∏—Å–∫: {risk_score} {color}\n"
        f"–í–∞–ª–∏–¥–Ω—ã–π: {'–î–∞' if valid else '–ù–µ—Ç'}\n"
        f"Disposable: {'–î–∞' if disposable else '–ù–µ—Ç'}\n"
        f"Abuse: {'–î–∞' if recent_abuse else '–ù–µ—Ç'}"
    )

    if users_data[user_id]["free_checks"] > 0:
        users_data[user_id]["free_checks"] -= 1
    elif users_data[user_id]["balance"] >= 0.1:
        users_data[user_id]["balance"] -= 0.1
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å.")
        await state.clear()
        return

    await message.answer(text)
    await state.clear()

@dp.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
async def ask_phone(message: Message, state: FSMContext):
    await state.set_state(MenuStates.waiting_for_phone)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +123456789):")

@dp.message(MenuStates.waiting_for_phone)
async def check_phone(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    phone = message.text.strip()

    response = requests.get(f"http://apilayer.net/api/validate?access_key={NUMVERIFY_API_KEY}&number={phone}&format=1").json()

    if "valid" not in response:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç.")
        await state.clear()
        return

    risk_score = 0 if response["valid"] else 80
    color = get_risk_color(risk_score)

    text = (
        f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {phone}</b>\n"
        f"–†–∏—Å–∫: {risk_score} {color}\n"
        f"–í–∞–ª–∏–¥–Ω—ã–π: {'–î–∞' if response['valid'] else '–ù–µ—Ç'}\n"
        f"–°—Ç—Ä–∞–Ω–∞: {response.get('country_name', 'N/A')}\n"
        f"–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {response.get('local_format', 'N/A')}\n"
        f"–û–ø–µ—Ä–∞—Ç–æ—Ä: {response.get('carrier', 'N/A')}"
    )

    if users_data[user_id]["free_checks"] > 0:
        users_data[user_id]["free_checks"] -= 1
    elif users_data[user_id]["balance"] >= 0.1:
        users_data[user_id]["balance"] -= 0.1
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å.")
        await state.clear()
        return

    await message.answer(text)
    await state.clear()

@dp.message(F.text == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def top_up(message: Message):
    await message.answer(
        f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ BTC: <code>{btc_address}</code>\n"
        f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ LTC: <code>{ltc_address}</code>\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏ /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤—Ä—É—á–Ω—É—é."
    )

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
