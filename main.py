import logging
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
from aiogram.utils import executor
import re

API_TOKEN = "7797606083:AAESciBzaFUiMmWiuqoOM61Ef7I7vEXNkQU"
IPQUALITY_API_KEY = "QUn48qWULMrgLKONUVMDJ3nG8A7"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ IP")],
        [KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ email")],
        [KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")]
    ],
    resize_keyboard=True
)

@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu)

@dp.message()
async def handle_message(message: types.Message):
    text = message.text.strip()

    if text == "–ü—Ä–æ–≤–µ—Ä–∫–∞ IP":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å:")
    elif text == "–ü—Ä–æ–≤–µ—Ä–∫–∞ email":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ email:")
    elif text == "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +1234567890:")
    elif re.match(r"^\d{1,3}(\.\d{1,3}){3}$", text):
        await check_ip(message, text)
    elif re.match(r"^\+?\d{10,15}$", text):
        await check_phone(message, text)
    elif re.match(r"[^@]+@[^@]+\.[^@]+", text):
        await check_email(message, text)
    else:
        await message.answer("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.")

async def check_ip(message, ip):
    url = f"https://ipqualityscore.com/api/json/ip/{IPQUALITY_API_KEY}/{ip}"
    response = requests.get(url)
    data = response.json()

    risk = data.get("fraud_score", 0)
    risk_color = "üü¢" if risk < 30 else "üü°" if risk < 70 else "üî¥"

    result = (
        f"{risk_color} –†–∏—Å–∫: {risk}/100\n"
        f"IP: {ip}\n"
        f"–ì–æ—Ä–æ–¥: {data.get('city')}\n"
        f"–†–µ–≥–∏–æ–Ω: {data.get('region')}\n"
        f"–°—Ç—Ä–∞–Ω–∞: {data.get('country_name')}\n"
        f"–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {data.get('zip_code')}\n"
        f"–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: {'–î–∞' if data.get('is_proxy') or data.get('is_tor') else '–ù–µ—Ç'}"
    )
    await message.answer(result)

async def check_email(message, email):
    url = f"https://ipqualityscore.com/api/json/email/{IPQUALITY_API_KEY}/{email}"
    response = requests.get(url)
    data = response.json()

    risk = data.get("fraud_score", 0)
    valid = data.get("valid", False)
    disposable = data.get("disposable", False)

    risk_color = "üü¢" if risk < 30 else "üü°" if risk < 70 else "üî¥"

    result = (
        f"{risk_color} –†–∏—Å–∫: {risk}/100\n"
        f"–í–∞–ª–∏–¥–Ω—ã–π: {'–î–∞' if valid else '–ù–µ—Ç'}\n"
        f"Disposable: {'–î–∞' if disposable else '–ù–µ—Ç'}"
    )
    await message.answer(result)

async def check_phone(message, phone):
    url = f"https://ipqualityscore.com/api/json/phone/{IPQUALITY_API_KEY}/{phone}"
    response = requests.get(url)
    data = response.json()

    risk = data.get("fraud_score", 0)
    active = data.get("active_status", "unknown")
    carrier = data.get("carrier", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    risk_color = "üü¢" if risk < 30 else "üü°" if risk < 70 else "üî¥"

    result = (
        f"{risk_color} –†–∏—Å–∫: {risk}/100\n"
        f"–°—Ç–∞—Ç—É—Å: {active}\n"
        f"–û–ø–µ—Ä–∞—Ç–æ—Ä: {carrier}\n"
        f"–¢–∏–ø: {data.get('line_type')}"
    )
    await message.answer(result)

if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
