import logging
import requests
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command, CommandStart
import asyncio

BOT_TOKEN = "7797606083:AAESciBzaFUiMmWiuqoOM61Ef7I7vEXNkQU"
ABSTRACT_API_KEY = "76599f16ac4f4a359808485a87a8f3bd"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

class CheckIP(StatesGroup):
    waiting_for_ip = State()

@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å /check_ip —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å IP-–∞–¥—Ä–µ—Å.")

@dp.message(Command("check_ip"))
async def check_ip(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    await state.set_state(CheckIP.waiting_for_ip)

@dp.message(CheckIP.waiting_for_ip)
async def process_ip(message: types.Message, state: FSMContext):
    ip = message.text.strip()
    await state.clear()

    try:
        response = requests.get(
            f"https://ipgeolocation.abstractapi.com/v1/?api_key={ABSTRACT_API_KEY}&ip_address={ip}"
        )
        data = response.json()

        # –û—Ç–ª–∞–¥–∫–∞
        await message.answer(f"<b>DEBUG:</b>\n<code>{str(data)[:4000]}</code>")

        # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π
        security = data.get('security') or {}
        blacklists = data.get('blacklists') or {}
        open_ports = data.get('open_ports') or []

        score = int(security.get('threat_score') or 0)

        if score < 30:
            risk_color = "üü¢"
        elif score < 70:
            risk_color = "üü°"
        else:
            risk_color = "üî¥"

        result = (
            f"<b>IP:</b> {data.get('ip_address', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"<b>–°—Ç—Ä–∞–Ω–∞:</b> {data.get('country', '‚Äî')}\n"
            f"<b>–†–µ–≥–∏–æ–Ω:</b> {data.get('region', '‚Äî')}\n"
            f"<b>–ì–æ—Ä–æ–¥:</b> {data.get('city', '‚Äî')}\n"
            f"<b>ZIP:</b> {data.get('postal_code', '‚Äî')}\n"
            f"<b>–ü—Ä–æ–≤–∞–π–¥–µ—Ä:</b> {data.get('connection', {}).get('isp_name', '‚Äî')}\n"
            f"<b>VPN/Proxy:</b> {'–î–∞' if security.get('is_vpn') or security.get('is_proxy') else '–ù–µ—Ç'}\n"
            f"<b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã:</b> {', '.join(map(str, open_ports)) if open_ports else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
            f"<b>–ß–µ—Ä–Ω—ã–µ —Å–ø–∏—Å–∫–∏:</b> {', '.join(blacklists.get('engines') or []) if blacklists.get('is_blacklisted') else '–ù–µ—Ç'}\n"
            f"<b>–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞:</b> {risk_color} {score}/100"
        )
        await message.answer(result)

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ IP: {e}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
