import asyncio import aiohttp from aiogram import Bot, Dispatcher, F, Router, types from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton from aiogram.enums import ParseMode from aiogram.fsm.context import FSMContext from aiogram.fsm.state import StatesGroup, State from aiogram.fsm.storage.memory import MemoryStorage from aiogram.filters import Command

bot = Bot(token="7797606083:AAESciBzaFUiMmWiuqoOM61Ef7I7vEXNkQU", parse_mode=ParseMode.HTML) dp = Dispatcher(storage=MemoryStorage()) router = Router()

class CheckState(StatesGroup): ip = State() email = State() phone = State()

–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

main_kb = ReplyKeyboardMarkup( keyboard=[ [KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ IP")], [KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ Email")], [KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")] ], resize_keyboard=True )

@router.message(Command("start")) async def start_cmd(message: Message): await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ IP, email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply_markup=main_kb)

–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é

@router.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∫–∞ IP") async def check_ip(message: Message, state: FSMContext): await message.answer("–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:") await state.set_state(CheckState.ip)

@router.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∫–∞ Email") async def check_email(message: Message, state: FSMContext): await message.answer("–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:") await state.set_state(CheckState.email)

@router.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞") async def check_phone(message: Message, state: FSMContext): await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:") await state.set_state(CheckState.phone)

–ü—Ä–æ–≤–µ—Ä–∫–∞ IP —á–µ—Ä–µ–∑ Abstract API

@router.message(CheckState.ip) async def process_ip(message: Message, state: FSMContext): ip = message.text.strip() api_key = "76599f16ac4f4a359808485a87a8f3bd" url = f"https://ipgeolocation.abstractapi.com/v1/?api_key={api_key}&ip_address={ip}"

async with aiohttp.ClientSession() as session:
    async with session.get(url) as resp:
        if resp.status != 200:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            await state.clear()
            return
        data = await resp.json()

country = data.get("country", "N/A")
region = data.get("region", "N/A")
city = data.get("city", "N/A")
postal = data.get("postal_code", "N/A")
isp = data.get("connection", {}).get("isp_name", "N/A")
is_vpn = data.get("security", {}).get("is_vpn", False)
is_proxy = data.get("security", {}).get("is_proxy", False)
is_tor = data.get("security", {}).get("is_tor", False)
blacklist = data.get("security", {}).get("is_blacklisted", False)

risk_score = 0
if is_vpn: risk_score += 30
if is_proxy: risk_score += 30
if is_tor: risk_score += 40
if blacklist: risk_score += 20
if risk_score > 100: risk_score = 100

if risk_score < 30:
    color = "üü¢ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"
elif risk_score < 70:
    color = "üü° –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫"
else:
    color = "üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"

result = (
    f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ IP</b>:\n"
    f"<b>IP:</b> {ip}\n"
    f"<b>–°—Ç—Ä–∞–Ω–∞:</b> {country}\n"
    f"<b>–†–µ–≥–∏–æ–Ω:</b> {region}\n"
    f"<b>–ì–æ—Ä–æ–¥:</b> {city}, {postal}\n"
    f"<b>–ü—Ä–æ–≤–∞–π–¥–µ—Ä:</b> {isp}\n"
    f"<b>VPN:</b> {'–î–∞' if is_vpn else '–ù–µ—Ç'}\n"
    f"<b>–ü—Ä–æ–∫—Å–∏:</b> {'–î–∞' if is_proxy else '–ù–µ—Ç'}\n"
    f"<b>TOR:</b> {'–î–∞' if is_tor else '–ù–µ—Ç'}\n"
    f"<b>–í —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ:</b> {'–î–∞' if blacklist else '–ù–µ—Ç'}\n"
    f"<b>–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞:</b> {risk_score}/100\n"
    f"{color}"
)
await message.answer(result)
await state.clear()

–ü—Ä–æ–≤–µ—Ä–∫–∞ Email

@router.message(CheckState.email) async def process_email(message: Message, state: FSMContext): email = message.text.strip() api_key = "76599f16ac4f4a359808485a87a8f3bd" url = f"https://emailvalidation.abstractapi.com/v1/?api_key={api_key}&email={email}"

async with aiohttp.ClientSession() as session:
    async with session.get(url) as resp:
        if resp.status != 200:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ email.")
            await state.clear()
            return
        data = await resp.json()

is_valid = data.get("is_valid_format", {}).get("value", False)
is_disposable = data.get("is_disposable_email", {}).get("value", False)
is_blacklisted = data.get("is_blacklisted", {}).get("value", False)
quality_score = data.get("quality_score", "0")

risk = float(quality_score)
if risk >= 0.8:
    color = "üü¢ –ù–∞–¥–µ–∂–Ω—ã–π email"
elif risk >= 0.5:
    color = "üü° –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫"
else:
    color = "üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"

result = (
    f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ Email</b>:\n"
    f"<b>Email:</b> {email}\n"
    f"<b>–§–æ—Ä–º–∞—Ç:</b> {'–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π' if is_valid else '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π'}\n"
    f"<b>–í—Ä–µ–º–µ–Ω–Ω—ã–π:</b> {'–î–∞' if is_disposable else '–ù–µ—Ç'}\n"
    f"<b>–í —á–µ—Ä–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö:</b> {'–î–∞' if is_blacklisted else '–ù–µ—Ç'}\n"
    f"<b>–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞:</b> {quality_score}\n"
    f"{color}"
)
await message.answer(result)
await state.clear()

–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

@router.message(CheckState.phone) async def process_phone(message: Message, state: FSMContext): phone = message.text.strip() api_key = "76599f16ac4f4a359808485a87a8f3bd" url = f"https://phonevalidation.abstractapi.com/v1/?api_key={api_key}&phone={phone}"

async with aiohttp.ClientSession() as session:
    async with session.get(url) as resp:
        if resp.status != 200:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
            await state.clear()
            return
        data = await resp.json()

valid = data.get("valid", False)
country = data.get("country", "N/A")
location = data.get("location", "N/A")
type_ = data.get("type", "N/A")
carrier = data.get("carrier", "N/A")

result = (
    f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>:\n"
    f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
    f"<b>–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω:</b> {'–î–∞' if valid else '–ù–µ—Ç'}\n"
    f"<b>–°—Ç—Ä–∞–Ω–∞:</b> {country}\n"
    f"<b>–ì–æ—Ä–æ–¥:</b> {location}\n"
    f"<b>–¢–∏–ø:</b> {type_}\n"
    f"<b>–û–ø–µ—Ä–∞—Ç–æ—Ä:</b> {carrier}"
)
await message.answer(result)
await state.clear()

async def main(): dp.include_router(router) await dp.start_polling(bot)

if name == "main": asyncio.run(main())
